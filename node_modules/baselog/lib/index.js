(function(){
  var print, Base, logLevel, Entry, simpleEntry, fatal, critical, error, warning, notice, info, debug, Logbook;
  print = require('util').print;
  Base = require('boo').Base;
  logLevel = {
    fatal: 0,
    critical: 1,
    error: 2,
    warning: 3,
    notice: 4,
    info: 5,
    debug: 6
  };
  Entry = Base.derive({
    init: function(name, message, data){
      this.name = name;
      this.message = message;
      this.data = data || {};
      this.level = logLevel[this.name];
      this.date = new Date;
      return this;
    }
  });
  simpleEntry = curry$(function(name, message){
    return Entry.make(name, message);
  });
  fatal = simpleEntry('fatal');
  critical = simpleEntry('critical');
  error = simpleEntry('error');
  warning = simpleEntry('warning');
  notice = simpleEntry('notice');
  info = simpleEntry('info');
  debug = simpleEntry('debug');
  Logbook = Base.derive({
    init: function(level){
      this.level = level || 0;
      return this;
    },
    write: function(x){
      print("[" + x.date + "] " + x.name.toUpperCase() + ": " + x.message + "\n");
      return this;
    },
    log: function(entry){
      if (!(entry.level > this.level)) {
        this.write(entry);
      }
      return this;
    },
    fatal: function(message){
      return this.log(fatal(message));
    },
    critical: function(message){
      return this.log(critical(message));
    },
    error: function(message){
      return this.log(error(message));
    },
    warning: function(message){
      return this.log(warning(message));
    },
    notice: function(message){
      return this.log(notice(message));
    },
    info: function(message){
      return this.log(info(message));
    },
    debug: function(message){
      return this.log(debug(message));
    }
  });
  module.exports = {
    fatal: fatal,
    critical: critical,
    error: error,
    warning: warning,
    notice: notice,
    info: info,
    debug: debug,
    level: logLevel,
    Entry: Entry,
    Logbook: Logbook
  };
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
