(function(){
  var colours, moment, puts, ref$, Logbook, level, scheme, id, padWith, pad, colourFor, display, Logger;
  colours = require('cli-color');
  moment = require('moment');
  puts = require('util').puts;
  ref$ = require('baselog'), Logbook = ref$.Logbook, level = ref$.level;
  scheme = {
    fatal: colours.redBright.bold,
    critical: colours.red,
    error: colours.magentaBright,
    warning: colours.yellow,
    notice: colours.blue,
    info: colours.cyan
  };
  id = function(a){
    return a;
  };
  padWith = curry$(function(char, size, text){
    var n;
    n = size - text.length;
    switch (false) {
    case !(n <= 0):
      return text;
    default:
      return text + Array(n).join(char);
    }
  });
  pad = padWith(' ', 'critical'.length + 2);
  colourFor = function(level){
    switch (false) {
    case !(level in scheme):
      return scheme[level];
    default:
      return id;
    }
  };
  display = curry$(function(xs){
    return puts(xs.filter(Boolean).join(' '));
  });
  Logger = Logbook.derive({
    init: function(options){
      var ref$;
      options || (options = {});
      this.level = (ref$ = options.level) != null
        ? ref$
        : level.info;
      this.prefix = options.prefix;
      return this;
    },
    write: function(x){
      display([this.showPrefix(x), this.showLevel(x), this.show(x)]);
      return this;
    },
    showDate: function(x){
      return colours.green("[" + moment(x.date).format('DD/MM/YYYY hh:mm:ss ZZ') + "]");
    },
    showPrefix: function(x){
      if (this.prefix) {
        return colours.magenta("[" + this.prefix + "]");
      }
    },
    showLevel: function(x){
      return colourFor(x.name)(colours.bold(pad(x.name.toUpperCase()) + ""));
    },
    show: function(x){
      return colourFor(x.name)(x.message);
    },
    heading: function(text){
      puts('');
      return puts(colours.greenBright.bold(padWith('-', 79, "-- " + text + " ")));
    }
  });
  module.exports = {
    scheme: scheme,
    Logger: Logger
  };
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
